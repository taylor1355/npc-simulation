{
	"nodes":[
		{"id":"1be9220ea1c5225e","type":"group","x":-1400,"y":-640,"width":2640,"height":1640,"label":"Item"},
		{"id":"a627efd8983615d4","type":"group","x":-4060,"y":-401,"width":1260,"height":695,"label":"State Machine"},
		{"id":"d9d20a02146fa3c4","type":"text","text":"## Interaction Request\nFields\n- `interaction_name`: name of the interaction in question\n- `request_type`: what the NPC is trying to do. For now values include `start_interaction` and `cancel_interaction`.\n- `status`: values include `sent`, `accepted`, or `rejected`\n- `npc_controller`: the NPC that is making this request\n- `item_controller`: the controller that is handling this request. This is mainly meant for consumption by the NPC, so they can keep track of the item being interacted with.\n- `arguments` (`dict[str, Any]`): named arguments to the interaction","x":-2160,"y":-390,"width":540,"height":450},
		{"id":"ac64faffcab7023c","type":"text","text":"### NPC","x":-2480,"y":-320,"width":112,"height":50},
		{"id":"8846cd6ce56c0b9f","type":"text","text":"### Item Controller\n- Each component that is a part of the item will be a `Node2D` child of the item controller\n\nResponsibilities\n- Aggregates the interactions from each component into a single interface that can be accessed by NPCs. Any NPC standing next to the item NPC will be able to read the names and descriptions for each interaction.\n- Tracks which NPC is interacting with it; whether the interaction is ongoing, canceled, or ended; how long an active interaction has taken so far. For now, only one interaction (initiated by one NPC) can be ongoing at a time.\n- Acts as a mediator between NPCs and Interactions\n\t- *Initiating an interaction*: An NPC first makes an `InteractionRequest` (similar in spirit to a REST API request). The item controller will do some initial verification (making sure the required fields are present and of the right data types, etc.), set `request.item_controller = self`, then invoke the `self.interactions[request.interaction_name].start_request(request)` signal. After the signal's handler has been executed, the controller can check the interaction's response by looking at `interaction_request.status`. Either the item controller or the component can reject the request (preferably giving the reason for rejection in natural language) by simply calling `request.reject(reason: str)`. If the component's conditions are met, then the request can be accepted with `request.accept()`. Both the `reject` and `accept` should be connected to the state of the request and notify the NPC.\n\t- *Canceling an interaction*: This is similar to the procedure for starting an interaction. An interaction may only be cancelable under certain conditions, or not cancelable at all.\n\t- *Finishing an interaction*: The controller should have a handler for the `interaction_finished` signals emitted by its components. In this handler, it should update its state accordingly and relay the `interaction_finished` signal to the NPC.","x":-1320,"y":-551,"width":660,"height":911},
		{"id":"a63fc972dbb2f76c","type":"text","text":"### Moving to interactable","x":-4040,"y":24,"width":338,"height":74},
		{"id":"6532708b1582cf25","type":"text","text":"### Pending Interaction\n- Send an interaction request\n- Wait for it to be accepted or rejected","x":-3740,"y":-381,"width":347,"height":173},
		{"id":"a1bd11d4c0dce1c0","type":"text","text":"### Wandering","x":-3528,"y":184,"width":222,"height":90},
		{"id":"e763b6423d33cfc2","type":"text","text":"retry","x":-3499,"y":-96,"width":106,"height":60},
		{"id":"8355f4acca291ed9","type":"text","text":"### Interacting","x":-2996,"y":-320,"width":176,"height":52},
		{"id":"07ce2d45ebe2ce75","type":"text","text":"### Consumable Component\nParameters:\n- `need_amounts`: a map giving how much each need bar will change by upon consumption of this item\n- `consumption_time`: how long the consumption interaction will take\n\nSignals:\n- `interaction_finished`: invoked when an NPC is done interacting with the component\n\nFields\n- `amount_left`: (come up with a better name) gives the percentage left. This is useful so that if an interaction is interrupted midway, the consumable still has a state that makes sense\n- `current_npc`: The NPC that is currently consuming this item\n- `timer`: Every tick, decrease `amount_left` and modify the NPC's needs proportionally based on `need_amounts`. When `amount_left` reaches 0, invoke the `interaction_finished` signal.\n- `interactions` (only 1):\n\t- `name: \"consume\"`\n\t- `description: \"consuming this item will result in ...\"`\n\t- `start_interaction`: Accept the request only if the NPC is close enough. Set `current_npc`. Start `timer`.\n\t- `cancel_interaction`: Accept the request. Invoke the `interaction_finished` signal.\n\nFunctions\n- `interaction_finished_handler` (should be linked to `interaction_finished` signal): delete the timer object and do anything else needed to end the interaction. If `amount_left` $\\leq$ 0, signal for the item to perform any necessary cleanup and delete itself. The deletions should be deferred to allow the item controller to execute its own handler for `interaction_finished`.","x":-599,"y":160,"width":1085,"height":740},
		{"id":"02f6afe2f5210171","type":"text","text":"### Component Interface\n\n- `interactions`: list of `Interaction` objects\n- `interaction_finished`: signal meant for consumption by the item controller. Can optionally include a data payload to give the NPC information about the interaction","x":-262,"y":-248,"width":410,"height":254},
		{"id":"bd67a8bb8e4ee007","type":"text","text":"### Interaction Interface\n- `name`: name of the interaction that is showed to NPCs\n- `description`: description of what the interaction does\n- signals (these should be linked to handler functions in the component)\n\t- `start_request(request)`: Signal invoked by the item controller when an NPC sends a request to initiate this interaction. The handler will have access to the NPC and `ItemController` objects through `request`, and should be defined in the component so that it has access to the component state/functionality\n\t- `cancel_request(request)`: Similar to the `start_request`, but invoked by the item controller when an NPC sends a request to cancel the interaction","x":486,"y":-325,"width":680,"height":408}
	],
	"edges":[
		{"id":"e489af2b6df619f2","fromNode":"02f6afe2f5210171","fromSide":"bottom","toNode":"07ce2d45ebe2ce75","toSide":"top","label":"implemented by"},
		{"id":"e7729248e0cc26b2","fromNode":"bd67a8bb8e4ee007","fromSide":"left","toNode":"02f6afe2f5210171","toSide":"right","label":"contained in"},
		{"id":"04151655311d5981","fromNode":"02f6afe2f5210171","fromSide":"left","toNode":"8846cd6ce56c0b9f","toSide":"right","label":"contained in"},
		{"id":"9b832a210e049fbb","fromNode":"ac64faffcab7023c","fromSide":"right","toNode":"d9d20a02146fa3c4","toSide":"left","label":"creates"},
		{"id":"8ed2dac0cb7418fe","fromNode":"d9d20a02146fa3c4","fromSide":"right","toNode":"8846cd6ce56c0b9f","toSide":"left","label":"sent to"},
		{"id":"6ab12444d89a6af9","fromNode":"a1bd11d4c0dce1c0","fromSide":"left","toNode":"a63fc972dbb2f76c","toSide":"bottom","label":"interactable seen"},
		{"id":"b994c2473ae4fd82","fromNode":"a63fc972dbb2f76c","fromSide":"top","toNode":"6532708b1582cf25","toSide":"left","label":"interactable reached"},
		{"id":"285bd780c3c6ad3e","fromNode":"6532708b1582cf25","fromSide":"right","toNode":"8355f4acca291ed9","toSide":"left","label":"request accepted"},
		{"id":"82057e9110f8b50c","fromNode":"6532708b1582cf25","fromSide":"right","toNode":"e763b6423d33cfc2","toSide":"right","label":"request rejected"},
		{"id":"ed152e253b6675bf","fromNode":"e763b6423d33cfc2","fromSide":"left","toNode":"6532708b1582cf25","toSide":"bottom"},
		{"id":"4834f431b675787d","fromNode":"8355f4acca291ed9","fromSide":"bottom","toNode":"a1bd11d4c0dce1c0","toSide":"right","label":"interaction finished"}
	]
}